package basic;
/*
 * 1.Runnable인터페이스를 구현하는 클래스를 생성
 * 2.Runnable인터페이스가 갖고있는 추상메소드인 run메소드를 오버라이딩
 * 	 => 동시 작업하고 싶은 내용을 정의
 * 3.작성한 Runnable객체를 이용해서 Thread객체를 생성
 * 	 => Thread객체를 생성하면서 매개변수로 Runnable객체를 전달
 */

class RunnanbleDemo1 implements Runnable {
	
	public void run() {
		// 1부터 20까지 출력하는 코드를 다른 실행흐름이랑 동시에 출력하는게 목적

		for (int i = 1; i <= 20; i++) {
			System.out.print(i+"("+Thread.currentThread().getName()+")");
			//currentThread() : 현재 실행중인 쓰레드를 가져온다.
			try {
				Thread.sleep(500);// 실행흐름을 멈춘다.
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			if (i % 5 == 0) {
				System.out.println();
			}
		}

	}
}
//ThreadDemo01객체를 활용하여 멀티쓰레드 프로그래밍 구현
public class RunnableTest01  {

	public static void main(String[] args) {
		System.out.println("***********프로그램 시작**********");
		RunnanbleDemo1 r1 = new RunnanbleDemo1();
		RunnanbleDemo1 r2 = new RunnanbleDemo1();

		//runnable은 기본적으로 run메소드만 갖고잇기 때문에, start메소드는 사용할 수 없다.
		r1.run();
		r2.run();
		System.out.println("작업중....");
		for(int i=1;i<=10;i++) {
			System.out.println("main");
			try {
				Thread.sleep(200);// 실행흐름을 멈춘다.
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		System.out.println("*********프로그램종료***********");

	}

}
