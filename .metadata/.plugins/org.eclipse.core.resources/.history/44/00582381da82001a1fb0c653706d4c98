package basic;

/*
 * 멀티쓰레드 프로그래밍
 * 1. Thread클래스를 상속받는다.
 * 2. run메소드를 오버라이딩
 * 	  => 쓰레드프로그래밍으로 작업하고 싶은 내용을 구현(동시의 실행 흐름으로 표현하고 싶은 내용을 구현)
 * 3. Thread클래스의(Thread의 하위클래스) start메소드 호출
 * 	  => 동시작업 시작
 *    => run을 직접 호출하지 않고 start메소드를 호출하면, JVM이 실행할 수 있는 상태가 되면
 *       자동으로 Thread클래스의 run메소드를 호출
 * 
 * 
 */
class DigitThread extends Thread {
	public DigitThread(String who) { //생성자만들어주기
		super(who);
	}
	public void run() {
		// 1부터 20까지 출력하는 코드를 다른 실행흐름이랑 동시에 출력하는게 목적

		for (int i = 1; i <= 100; i++) {
			System.out.print(i+"("+getName()+")");
			try {
				Thread.sleep(100);// 실행흐름을 멈춘다.
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			if (i % 5 == 0) {
				System.out.println();
			}
		}

	}
}
class AlphaThread extends Thread {
	public AlphaThread(String who) { //생성자만들어주기
		super(who);
	}
	public void run() {
		// 1부터 20까지 출력하는 코드를 다른 실행흐름이랑 동시에 출력하는게 목적

		for (char i = 'A'; i <= 'Z'; i++) {
			System.out.print(i+"("+getName()+")");
			try {
				Thread.sleep(300);// 실행흐름을 멈춘다.
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			if (i % 5 == 0) {
				System.out.println();
			}
		}

	}
}
//ThreadDemo01객체를 활용하여 멀티쓰레드 프로그래밍 구현
public class ThreadExam01 {

	public static void main(String[] args) {
		System.out.println("***********프로그램 시작**********");
		DigitThread t1 = new DigitThread("t1");
		AlphaThread t2 = new AlphaThread("t2");

		//t1.run(); 이 경우는 단순한 메소드호출이다. (쓰레드 프로그래밍을 할 수 없다.)
		t1.start();
		t2.start();
		System.out.println("작업중....");
		for(int i=1;i<=10;i++) {
			System.out.println("main");
			try {
				Thread.sleep(200);// 실행흐름을 멈춘다.
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		System.out.println("*********프로그램종료***********");

	}

}
